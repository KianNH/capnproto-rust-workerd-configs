// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: src/workerd.capnp

pub mod config {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_services(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::workerd::service::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_services(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_sockets(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Reader<'a, crate::workerd::socket::Owned>>
        {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_sockets(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_v8_flags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_v8_flags(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 3,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_services(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::workerd::service::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_services(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::workerd::service::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_services(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::service::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_services(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_sockets(
            self,
        ) -> ::capnp::Result<::capnp::struct_list::Builder<'a, crate::workerd::socket::Owned>>
        {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_sockets(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::workerd::socket::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_sockets(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::socket::Owned> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(1),
                size,
            )
        }
        #[inline]
        pub fn has_sockets(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_v8_flags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_v8_flags(
            &mut self,
            value: ::capnp::text_list::Reader<'a>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(2),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_v8_flags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(2),
                size,
            )
        }
        #[inline]
        pub fn has_v8_flags(&self) -> bool {
            !self.builder.is_pointer_field_null(2)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0x8794_486c_76aa_a7d6;
    }
}

pub mod socket {
    pub use self::Which::{Http, Https};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_address(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_address(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn has_http(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.reader.get_pointer_field(2).is_null()
        }
        #[inline]
        pub fn get_service(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(4),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_service(&self) -> bool {
            !self.reader.get_pointer_field(4).is_null()
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
            match self.reader.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Http(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(2),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(Https(self.reader.into())),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 5,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_address(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_address(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_address(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        #[inline]
        pub fn has_address(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn set_http(
            &mut self,
            value: crate::workerd::http_options::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(2),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_http(self) -> crate::workerd::http_options::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
        }
        #[inline]
        pub fn has_http(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.builder.is_pointer_field_null(2)
        }
        #[inline]
        pub fn init_https(mut self) -> crate::workerd::socket::https::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 1);
            self.builder.reborrow().get_pointer_field(2).clear();
            self.builder.reborrow().get_pointer_field(3).clear();
            self.builder.into()
        }
        #[inline]
        pub fn get_service(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(4),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_service(
            &mut self,
            value: crate::workerd::service_designator::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(4),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_service(self) -> crate::workerd::service_designator::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
        }
        #[inline]
        pub fn has_service(&self) -> bool {
            !self.builder.is_pointer_field_null(4)
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
            match self.builder.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Http(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(2),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(Https(self.builder.into())),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {
        pub fn get_service(&self) -> crate::workerd::service_designator::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
        }
    }
    mod _private {
        pub const TYPE_ID: u64 = 0x9a0e_ba45_530e_e79f;
    }
    pub enum Which<A0, A1> {
        Http(A0),
        Https(A1),
    }
    pub type WhichReader<'a> = Which<
        ::capnp::Result<crate::workerd::http_options::Reader<'a>>,
        crate::workerd::socket::https::Reader<'a>,
    >;
    pub type WhichBuilder<'a> = Which<
        ::capnp::Result<crate::workerd::http_options::Builder<'a>>,
        crate::workerd::socket::https::Builder<'a>,
    >;

    pub mod https {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_options(
                self,
            ) -> ::capnp::Result<crate::workerd::http_options::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_options(&self) -> bool {
                !self.reader.get_pointer_field(2).is_null()
            }
            #[inline]
            pub fn get_tls_options(
                self,
            ) -> ::capnp::Result<crate::workerd::tls_options::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_tls_options(&self) -> bool {
                !self.reader.get_pointer_field(3).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 5,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_options(
                self,
            ) -> ::capnp::Result<crate::workerd::http_options::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_options(
                &mut self,
                value: crate::workerd::http_options::Reader<'_>,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(2),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_options(self) -> crate::workerd::http_options::Builder<'a> {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(2),
                    0,
                )
            }
            #[inline]
            pub fn has_options(&self) -> bool {
                !self.builder.is_pointer_field_null(2)
            }
            #[inline]
            pub fn get_tls_options(
                self,
            ) -> ::capnp::Result<crate::workerd::tls_options::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_tls_options(
                &mut self,
                value: crate::workerd::tls_options::Reader<'_>,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(3),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_tls_options(self) -> crate::workerd::tls_options::Builder<'a> {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(3),
                    0,
                )
            }
            #[inline]
            pub fn has_tls_options(&self) -> bool {
                !self.builder.is_pointer_field_null(3)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {
            pub fn get_options(&self) -> crate::workerd::http_options::Pipeline {
                ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
            }
            pub fn get_tls_options(&self) -> crate::workerd::tls_options::Pipeline {
                ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(3))
            }
        }
        mod _private {
            pub const TYPE_ID: u64 = 0xde12_3876_383c_bbdc;
        }
    }
}

pub mod service {
    pub use self::Which::{Disk, External, Network, Unspecified, Worker};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn has_worker(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 1 {
                return false;
            }
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn has_network(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 2 {
                return false;
            }
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn has_external(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 3 {
                return false;
            }
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn has_disk(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 4 {
                return false;
            }
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
            match self.reader.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Unspecified(())),
                1 => ::core::result::Result::Ok(Worker(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                2 => ::core::result::Result::Ok(Network(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                3 => ::core::result::Result::Ok(External(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                4 => ::core::result::Result::Ok(Disk(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn set_unspecified(&mut self, _value: ()) {
            self.builder.set_data_field::<u16>(0, 0);
        }
        #[inline]
        pub fn set_worker(
            &mut self,
            value: crate::workerd::worker::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 1);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_worker(self) -> crate::workerd::worker::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 1);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_worker(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 1 {
                return false;
            }
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn set_network(
            &mut self,
            value: crate::workerd::network::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 2);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_network(self) -> crate::workerd::network::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 2);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_network(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 2 {
                return false;
            }
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn set_external(
            &mut self,
            value: crate::workerd::external_server::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 3);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_external(self) -> crate::workerd::external_server::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 3);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_external(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 3 {
                return false;
            }
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn set_disk(
            &mut self,
            value: crate::workerd::disk_directory::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 4);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_disk(self) -> crate::workerd::disk_directory::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 4);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_disk(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 4 {
                return false;
            }
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
            match self.builder.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Unspecified(())),
                1 => ::core::result::Result::Ok(Worker(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                2 => ::core::result::Result::Ok(Network(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                3 => ::core::result::Result::Ok(External(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                4 => ::core::result::Result::Ok(Disk(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0xe5c8_8e8b_b7bc_b6b9;
    }
    pub enum Which<A0, A1, A2, A3> {
        Unspecified(()),
        Worker(A0),
        Network(A1),
        External(A2),
        Disk(A3),
    }
    pub type WhichReader<'a> = Which<
        ::capnp::Result<crate::workerd::worker::Reader<'a>>,
        ::capnp::Result<crate::workerd::network::Reader<'a>>,
        ::capnp::Result<crate::workerd::external_server::Reader<'a>>,
        ::capnp::Result<crate::workerd::disk_directory::Reader<'a>>,
    >;
    pub type WhichBuilder<'a> = Which<
        ::capnp::Result<crate::workerd::worker::Builder<'a>>,
        ::capnp::Result<crate::workerd::network::Builder<'a>>,
        ::capnp::Result<crate::workerd::external_server::Builder<'a>>,
        ::capnp::Result<crate::workerd::disk_directory::Builder<'a>>,
    >;
}

pub mod service_designator {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_entrypoint(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_entrypoint(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 2,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_name(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_entrypoint(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_entrypoint(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_entrypoint(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        #[inline]
        pub fn has_entrypoint(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0xae8e_c91c_ee72_4450;
    }
}

pub mod worker {
    pub use self::Which::{Inherit, Modules, ServiceWorkerScript};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn has_modules(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn has_service_worker_script(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 1 {
                return false;
            }
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn has_inherit(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 2 {
                return false;
            }
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_compatibility_date(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_compatibility_date(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_compatibility_flags(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_compatibility_flags(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
        #[inline]
        pub fn get_bindings(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::workerd::worker::binding::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(3),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_bindings(&self) -> bool {
            !self.reader.get_pointer_field(3).is_null()
        }
        #[inline]
        pub fn get_global_outbound(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(4),
                Some(&_private::DEFAULT_GLOBAL_OUTBOUND[..]),
            )
        }
        #[inline]
        pub fn has_global_outbound(&self) -> bool {
            !self.reader.get_pointer_field(4).is_null()
        }
        #[inline]
        pub fn get_durable_object_namespaces(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<
                'a,
                crate::workerd::worker::durable_object_namespace::Owned,
            >,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(5),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_durable_object_namespaces(&self) -> bool {
            !self.reader.get_pointer_field(5).is_null()
        }
        #[inline]
        pub fn get_durable_object_unique_key_modifier(
            self,
        ) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(6),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_durable_object_unique_key_modifier(&self) -> bool {
            !self.reader.get_pointer_field(6).is_null()
        }
        #[inline]
        pub fn get_durable_object_storage(
            self,
        ) -> crate::workerd::worker::durable_object_storage::Reader<'a> {
            self.reader.into()
        }
        #[inline]
        pub fn get_cache_api_outbound(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(7),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_cache_api_outbound(&self) -> bool {
            !self.reader.get_pointer_field(7).is_null()
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
            match self.reader.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Modules(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(ServiceWorkerScript(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                2 => ::core::result::Result::Ok(Inherit(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 8,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn set_modules(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::workerd::worker::module::Owned>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_modules(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::worker::module::Owned>
        {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_modules(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn set_service_worker_script(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.set_data_field::<u16>(0, 1);
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_service_worker_script(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 1);
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_service_worker_script(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 1 {
                return false;
            }
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn set_inherit(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.set_data_field::<u16>(0, 2);
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_inherit(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 2);
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_inherit(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 2 {
                return false;
            }
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_compatibility_date(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_compatibility_date(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_compatibility_date(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        #[inline]
        pub fn has_compatibility_date(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_compatibility_flags(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_compatibility_flags(
            &mut self,
            value: ::capnp::text_list::Reader<'a>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(2),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_compatibility_flags(self, size: u32) -> ::capnp::text_list::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(2),
                size,
            )
        }
        #[inline]
        pub fn has_compatibility_flags(&self) -> bool {
            !self.builder.is_pointer_field_null(2)
        }
        #[inline]
        pub fn get_bindings(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::workerd::worker::binding::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(3),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_bindings(
            &mut self,
            value: ::capnp::struct_list::Reader<'a, crate::workerd::worker::binding::Owned>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(3),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_bindings(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::worker::binding::Owned>
        {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(3),
                size,
            )
        }
        #[inline]
        pub fn has_bindings(&self) -> bool {
            !self.builder.is_pointer_field_null(3)
        }
        #[inline]
        pub fn get_global_outbound(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(4),
                Some(&_private::DEFAULT_GLOBAL_OUTBOUND[..]),
            )
        }
        #[inline]
        pub fn set_global_outbound(
            &mut self,
            value: crate::workerd::service_designator::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(4),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_global_outbound(self) -> crate::workerd::service_designator::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(4), 0)
        }
        #[inline]
        pub fn has_global_outbound(&self) -> bool {
            !self.builder.is_pointer_field_null(4)
        }
        #[inline]
        pub fn get_durable_object_namespaces(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<
                'a,
                crate::workerd::worker::durable_object_namespace::Owned,
            >,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(5),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_durable_object_namespaces(
            &mut self,
            value: ::capnp::struct_list::Reader<
                'a,
                crate::workerd::worker::durable_object_namespace::Owned,
            >,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(5),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_durable_object_namespaces(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<
            'a,
            crate::workerd::worker::durable_object_namespace::Owned,
        > {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(5),
                size,
            )
        }
        #[inline]
        pub fn has_durable_object_namespaces(&self) -> bool {
            !self.builder.is_pointer_field_null(5)
        }
        #[inline]
        pub fn get_durable_object_unique_key_modifier(
            self,
        ) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(6),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_durable_object_unique_key_modifier(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(6).set_text(value);
        }
        #[inline]
        pub fn init_durable_object_unique_key_modifier(
            self,
            size: u32,
        ) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(6).init_text(size)
        }
        #[inline]
        pub fn has_durable_object_unique_key_modifier(&self) -> bool {
            !self.builder.is_pointer_field_null(6)
        }
        #[inline]
        pub fn get_durable_object_storage(
            self,
        ) -> crate::workerd::worker::durable_object_storage::Builder<'a> {
            self.builder.into()
        }
        #[inline]
        pub fn init_durable_object_storage(
            self,
        ) -> crate::workerd::worker::durable_object_storage::Builder<'a> {
            self.builder.set_data_field::<u16>(1, 0);
            self.builder.into()
        }
        #[inline]
        pub fn get_cache_api_outbound(
            self,
        ) -> ::capnp::Result<crate::workerd::service_designator::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(7),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_cache_api_outbound(
            &mut self,
            value: crate::workerd::service_designator::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(7),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_cache_api_outbound(
            self,
        ) -> crate::workerd::service_designator::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(7), 0)
        }
        #[inline]
        pub fn has_cache_api_outbound(&self) -> bool {
            !self.builder.is_pointer_field_null(7)
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
            match self.builder.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Modules(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(ServiceWorkerScript(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                2 => ::core::result::Result::Ok(Inherit(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    ),
                )),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {
        pub fn get_global_outbound(&self) -> crate::workerd::service_designator::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(4))
        }
        pub fn get_durable_object_storage(
            &self,
        ) -> crate::workerd::worker::durable_object_storage::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
        }
        pub fn get_cache_api_outbound(&self) -> crate::workerd::service_designator::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(7))
        }
    }
    mod _private {
        pub static DEFAULT_GLOBAL_OUTBOUND: [capnp::Word; 5] = [
            capnp::word(0, 0, 0, 0, 0, 0, 2, 0),
            capnp::word(5, 0, 0, 0, 74, 0, 0, 0),
            capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            capnp::word(105, 110, 116, 101, 114, 110, 101, 116),
            capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
        ];
        pub const TYPE_ID: u64 = 0xacfa_77e8_8fd9_7d1c;
    }
    pub enum Which<A0, A1, A2> {
        Modules(A0),
        ServiceWorkerScript(A1),
        Inherit(A2),
    }
    pub type WhichReader<'a> = Which<
        ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::workerd::worker::module::Owned>,
        >,
        ::capnp::Result<::capnp::text::Reader<'a>>,
        ::capnp::Result<::capnp::text::Reader<'a>>,
    >;
    pub type WhichBuilder<'a> = Which<
        ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::workerd::worker::module::Owned>,
        >,
        ::capnp::Result<::capnp::text::Builder<'a>>,
        ::capnp::Result<::capnp::text::Builder<'a>>,
    >;

    pub mod module {
        pub use self::Which::{CommonJsModule, Data, EsModule, Json, Text, Wasm};

        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_es_module(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_common_js_module(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 1 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_text(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 2 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_data(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 3 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_wasm(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 4 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_json(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 5 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(EsModule(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    1 => ::core::result::Result::Ok(CommonJsModule(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    2 => ::core::result::Result::Ok(Text(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Data(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Wasm(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(Json(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_es_module(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_es_module(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_es_module(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_common_js_module(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 1);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_common_js_module(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 1);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_common_js_module(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 1 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_text(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 2);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_text(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 2);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_text(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 2 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_data(&mut self, value: ::capnp::data::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 3);
                self.builder.reborrow().get_pointer_field(1).set_data(value);
            }
            #[inline]
            pub fn init_data(self, size: u32) -> ::capnp::data::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 3);
                self.builder.get_pointer_field(1).init_data(size)
            }
            #[inline]
            pub fn has_data(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 3 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_wasm(&mut self, value: ::capnp::data::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 4);
                self.builder.reborrow().get_pointer_field(1).set_data(value);
            }
            #[inline]
            pub fn init_wasm(self, size: u32) -> ::capnp::data::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 4);
                self.builder.get_pointer_field(1).init_data(size)
            }
            #[inline]
            pub fn has_wasm(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 4 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_json(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 5);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_json(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 5);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_json(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 5 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(EsModule(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    1 => ::core::result::Result::Ok(CommonJsModule(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    2 => ::core::result::Result::Ok(Text(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Data(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Wasm(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(Json(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0xd9d8_7a63_770a_12f3;
        }
        pub enum Which<A0, A1, A2, A3, A4, A5> {
            EsModule(A0),
            CommonJsModule(A1),
            Text(A2),
            Data(A3),
            Wasm(A4),
            Json(A5),
        }
        pub type WhichReader<'a> = Which<
            ::capnp::Result<::capnp::text::Reader<'a>>,
            ::capnp::Result<::capnp::text::Reader<'a>>,
            ::capnp::Result<::capnp::text::Reader<'a>>,
            ::capnp::Result<::capnp::data::Reader<'a>>,
            ::capnp::Result<::capnp::data::Reader<'a>>,
            ::capnp::Result<::capnp::text::Reader<'a>>,
        >;
        pub type WhichBuilder<'a> = Which<
            ::capnp::Result<::capnp::text::Builder<'a>>,
            ::capnp::Result<::capnp::text::Builder<'a>>,
            ::capnp::Result<::capnp::text::Builder<'a>>,
            ::capnp::Result<::capnp::data::Builder<'a>>,
            ::capnp::Result<::capnp::data::Builder<'a>>,
            ::capnp::Result<::capnp::text::Builder<'a>>,
        >;
    }

    pub mod binding {
        pub use self::Which::{
            CryptoKey, Data, DurableObjectNamespace, Json, KvNamespace, Parameter, R2Admin,
            R2Bucket, Service, Text, Unspecified, WasmModule,
        };

        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_text(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 2 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_data(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 3 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_json(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 4 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_wasm_module(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 5 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_crypto_key(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 6 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_service(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 7 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_durable_object_namespace(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 8 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_kv_namespace(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 9 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_r2_bucket(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 10 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn has_r2_admin(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 11 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(Unspecified(())),
                    1 => ::core::result::Result::Ok(Parameter(self.reader.into())),
                    2 => ::core::result::Result::Ok(Text(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Data(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Json(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(WasmModule(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    6 => ::core::result::Result::Ok(CryptoKey(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    7 => ::core::result::Result::Ok(Service(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    8 => ::core::result::Result::Ok(DurableObjectNamespace(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    9 => ::core::result::Result::Ok(KvNamespace(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    10 => ::core::result::Result::Ok(R2Bucket(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    11 => ::core::result::Result::Ok(R2Admin(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_unspecified(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(0, 0);
            }
            #[inline]
            pub fn init_parameter(
                mut self,
            ) -> crate::workerd::worker::binding::parameter::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 1);
                self.builder.reborrow().get_pointer_field(1).clear();
                self.builder.set_bool_field(16, false);
                self.builder.into()
            }
            #[inline]
            pub fn set_text(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 2);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_text(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 2);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_text(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 2 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_data(&mut self, value: ::capnp::data::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 3);
                self.builder.reborrow().get_pointer_field(1).set_data(value);
            }
            #[inline]
            pub fn init_data(self, size: u32) -> ::capnp::data::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 3);
                self.builder.get_pointer_field(1).init_data(size)
            }
            #[inline]
            pub fn has_data(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 3 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_json(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 4);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_json(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 4);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_json(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 4 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_wasm_module(&mut self, value: ::capnp::data::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 5);
                self.builder.reborrow().get_pointer_field(1).set_data(value);
            }
            #[inline]
            pub fn init_wasm_module(self, size: u32) -> ::capnp::data::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 5);
                self.builder.get_pointer_field(1).init_data(size)
            }
            #[inline]
            pub fn has_wasm_module(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 5 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_crypto_key(
                &mut self,
                value: crate::workerd::worker::binding::crypto_key::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 6);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_crypto_key(
                self,
            ) -> crate::workerd::worker::binding::crypto_key::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 6);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_crypto_key(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 6 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_service(
                &mut self,
                value: crate::workerd::service_designator::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 7);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_service(self) -> crate::workerd::service_designator::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 7);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_service(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 7 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_durable_object_namespace(
                &mut self,
                value: crate::workerd::worker::binding::durable_object_namespace_designator::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 8);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_durable_object_namespace(self, ) -> crate::workerd::worker::binding::durable_object_namespace_designator::Builder<'a>{
                self.builder.set_data_field::<u16>(0, 8);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_durable_object_namespace(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 8 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_kv_namespace(
                &mut self,
                value: crate::workerd::service_designator::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 9);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_kv_namespace(
                self,
            ) -> crate::workerd::service_designator::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 9);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_kv_namespace(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 9 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_r2_bucket(
                &mut self,
                value: crate::workerd::service_designator::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 10);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_r2_bucket(self) -> crate::workerd::service_designator::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 10);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_r2_bucket(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 10 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_r2_admin(
                &mut self,
                value: crate::workerd::service_designator::Reader<'_>,
            ) -> ::capnp::Result<()> {
                self.builder.set_data_field::<u16>(0, 11);
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_r2_admin(self) -> crate::workerd::service_designator::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 11);
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_r2_admin(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 11 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(Unspecified(())),
                    1 => ::core::result::Result::Ok(Parameter(self.builder.into())),
                    2 => ::core::result::Result::Ok(Text(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    3 => ::core::result::Result::Ok(Data(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    4 => ::core::result::Result::Ok(Json(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    5 => ::core::result::Result::Ok(WasmModule(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    6 => ::core::result::Result::Ok(CryptoKey(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    7 => ::core::result::Result::Ok(Service(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    8 => ::core::result::Result::Ok(DurableObjectNamespace(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    9 => ::core::result::Result::Ok(KvNamespace(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    10 => ::core::result::Result::Ok(R2Bucket(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    11 => ::core::result::Result::Ok(R2Admin(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0x8e7e_492f_d7e3_5f3e;
        }
        pub enum Which<A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> {
            Unspecified(()),
            Parameter(A0),
            Text(A1),
            Data(A2),
            Json(A3),
            WasmModule(A4),
            CryptoKey(A5),
            Service(A6),
            DurableObjectNamespace(A7),
            KvNamespace(A8),
            R2Bucket(A9),
            R2Admin(A10),
        }
        pub type WhichReader<'a> = Which<
            crate::workerd::worker::binding::parameter::Reader<'a>,
            ::capnp::Result<::capnp::text::Reader<'a>>,
            ::capnp::Result<::capnp::data::Reader<'a>>,
            ::capnp::Result<::capnp::text::Reader<'a>>,
            ::capnp::Result<::capnp::data::Reader<'a>>,
            ::capnp::Result<crate::workerd::worker::binding::crypto_key::Reader<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Reader<'a>>,
            ::capnp::Result<
                crate::workerd::worker::binding::durable_object_namespace_designator::Reader<
                    'a,
                >,
            >,
            ::capnp::Result<crate::workerd::service_designator::Reader<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Reader<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Reader<'a>>,
        >;
        pub type WhichBuilder<'a> = Which<
            crate::workerd::worker::binding::parameter::Builder<'a>,
            ::capnp::Result<::capnp::text::Builder<'a>>,
            ::capnp::Result<::capnp::data::Builder<'a>>,
            ::capnp::Result<::capnp::text::Builder<'a>>,
            ::capnp::Result<::capnp::data::Builder<'a>>,
            ::capnp::Result<crate::workerd::worker::binding::crypto_key::Builder<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Builder<'a>>,
            ::capnp::Result<
                crate::workerd::worker::binding::durable_object_namespace_designator::Builder<
                    'a,
                >,
            >,
            ::capnp::Result<crate::workerd::service_designator::Builder<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Builder<'a>>,
            ::capnp::Result<crate::workerd::service_designator::Builder<'a>>,
        >;

        pub mod type_ {
            pub use self::Which::{
                CryptoKey, Data, DurableObjectNamespace, Json, KvNamespace, R2Admin, R2Bucket,
                Service, Text, Unspecified, Wasm,
            };

            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            #[derive(Clone, Copy)]
            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn has_crypto_key(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 5 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn which(
                    self,
                ) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                    match self.reader.get_data_field::<u16>(0) {
                        0 => ::core::result::Result::Ok(Unspecified(())),
                        1 => ::core::result::Result::Ok(Text(())),
                        2 => ::core::result::Result::Ok(Data(())),
                        3 => ::core::result::Result::Ok(Json(())),
                        4 => ::core::result::Result::Ok(Wasm(())),
                        5 => ::core::result::Result::Ok(CryptoKey(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        6 => ::core::result::Result::Ok(Service(())),
                        7 => ::core::result::Result::Ok(DurableObjectNamespace(())),
                        8 => ::core::result::Result::Ok(KvNamespace(())),
                        9 => ::core::result::Result::Ok(R2Bucket(())),
                        10 => ::core::result::Result::Ok(R2Admin(())),
                        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                    }
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 1,
                        pointers: 1,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn set_unspecified(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 0);
                }
                #[inline]
                pub fn set_text(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 1);
                }
                #[inline]
                pub fn set_data(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 2);
                }
                #[inline]
                pub fn set_json(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 3);
                }
                #[inline]
                pub fn set_wasm(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 4);
                }
                #[inline]
                pub fn set_crypto_key(
                    &mut self,
                    value: ::capnp::enum_list::Reader<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                ) -> ::capnp::Result<()> {
                    self.builder.set_data_field::<u16>(0, 5);
                    ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                        self.builder.reborrow().get_pointer_field(0),
                        value,
                        false,
                    )
                }
                #[inline]
                pub fn init_crypto_key(
                    self,
                    size: u32,
                ) -> ::capnp::enum_list::Builder<
                    'a,
                    crate::workerd::worker::binding::crypto_key::Usage,
                > {
                    self.builder.set_data_field::<u16>(0, 5);
                    ::capnp::traits::FromPointerBuilder::init_pointer(
                        self.builder.get_pointer_field(0),
                        size,
                    )
                }
                #[inline]
                pub fn has_crypto_key(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 5 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_service(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 6);
                }
                #[inline]
                pub fn set_durable_object_namespace(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 7);
                }
                #[inline]
                pub fn set_kv_namespace(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 8);
                }
                #[inline]
                pub fn set_r2_bucket(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 9);
                }
                #[inline]
                pub fn set_r2_admin(&mut self, _value: ()) {
                    self.builder.set_data_field::<u16>(0, 10);
                }
                #[inline]
                pub fn which(
                    self,
                ) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema>
                {
                    match self.builder.get_data_field::<u16>(0) {
                        0 => ::core::result::Result::Ok(Unspecified(())),
                        1 => ::core::result::Result::Ok(Text(())),
                        2 => ::core::result::Result::Ok(Data(())),
                        3 => ::core::result::Result::Ok(Json(())),
                        4 => ::core::result::Result::Ok(Wasm(())),
                        5 => ::core::result::Result::Ok(CryptoKey(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        6 => ::core::result::Result::Ok(Service(())),
                        7 => ::core::result::Result::Ok(DurableObjectNamespace(())),
                        8 => ::core::result::Result::Ok(KvNamespace(())),
                        9 => ::core::result::Result::Ok(R2Bucket(())),
                        10 => ::core::result::Result::Ok(R2Admin(())),
                        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                    }
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {}
            mod _private {
                pub const TYPE_ID: u64 = 0x8906_a129_6519_bf8a;
            }
            pub enum Which<A0> {
                Unspecified(()),
                Text(()),
                Data(()),
                Json(()),
                Wasm(()),
                CryptoKey(A0),
                Service(()),
                DurableObjectNamespace(()),
                KvNamespace(()),
                R2Bucket(()),
                R2Admin(()),
            }
            pub type WhichReader<'a> = Which<
                ::capnp::Result<
                    ::capnp::enum_list::Reader<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                >,
            >;
            pub type WhichBuilder<'a> = Which<
                ::capnp::Result<
                    ::capnp::enum_list::Builder<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                >,
            >;
        }

        pub mod durable_object_namespace_designator {
            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            #[derive(Clone, Copy)]
            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn get_class_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_class_name(&self) -> bool {
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn get_service_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_service_name(&self) -> bool {
                    !self.reader.get_pointer_field(1).is_null()
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 0,
                        pointers: 2,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn get_class_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(0),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_class_name(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_class_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_class_name(&self) -> bool {
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn get_service_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_service_name(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.reborrow().get_pointer_field(1).set_text(value);
                }
                #[inline]
                pub fn init_service_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.get_pointer_field(1).init_text(size)
                }
                #[inline]
                pub fn has_service_name(&self) -> bool {
                    !self.builder.is_pointer_field_null(1)
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {}
            mod _private {
                pub const TYPE_ID: u64 = 0x804f_144f_f477_aac7;
            }
        }

        pub mod crypto_key {
            pub use self::Which::{Base64, Hex, Jwk, Pkcs8, Raw, Spki};

            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            #[derive(Clone, Copy)]
            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn has_raw(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 0 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn has_hex(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 1 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn has_base64(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 2 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn has_pkcs8(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 3 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn has_spki(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 4 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn has_jwk(&self) -> bool {
                    if self.reader.get_data_field::<u16>(0) != 5 {
                        return false;
                    }
                    !self.reader.get_pointer_field(0).is_null()
                }
                #[inline]
                pub fn get_algorithm(
                    self,
                ) -> crate::workerd::worker::binding::crypto_key::algorithm::Reader<'a>
                {
                    self.reader.into()
                }
                #[inline]
                pub fn get_extractable(self) -> bool {
                    self.reader.get_bool_field(32)
                }
                #[inline]
                pub fn get_usages(
                    self,
                ) -> ::capnp::Result<
                    ::capnp::enum_list::Reader<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                > {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(2),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_usages(&self) -> bool {
                    !self.reader.get_pointer_field(2).is_null()
                }
                #[inline]
                pub fn which(
                    self,
                ) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                    match self.reader.get_data_field::<u16>(0) {
                        0 => ::core::result::Result::Ok(Raw(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        1 => ::core::result::Result::Ok(Hex(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        2 => ::core::result::Result::Ok(Base64(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        3 => ::core::result::Result::Ok(Pkcs8(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        4 => ::core::result::Result::Ok(Spki(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        5 => ::core::result::Result::Ok(Jwk(
                            ::capnp::traits::FromPointerReader::get_from_pointer(
                                &self.reader.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                    }
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 1,
                        pointers: 3,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn set_raw(&mut self, value: ::capnp::data::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 0);
                    self.builder.reborrow().get_pointer_field(0).set_data(value);
                }
                #[inline]
                pub fn init_raw(self, size: u32) -> ::capnp::data::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 0);
                    self.builder.get_pointer_field(0).init_data(size)
                }
                #[inline]
                pub fn has_raw(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 0 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_hex(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 1);
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_hex(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 1);
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_hex(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 1 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_base64(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 2);
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_base64(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 2);
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_base64(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 2 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_pkcs8(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 3);
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_pkcs8(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 3);
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_pkcs8(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 3 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_spki(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 4);
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_spki(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 4);
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_spki(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 4 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn set_jwk(&mut self, value: ::capnp::text::Reader<'_>) {
                    self.builder.set_data_field::<u16>(0, 5);
                    self.builder.reborrow().get_pointer_field(0).set_text(value);
                }
                #[inline]
                pub fn init_jwk(self, size: u32) -> ::capnp::text::Builder<'a> {
                    self.builder.set_data_field::<u16>(0, 5);
                    self.builder.get_pointer_field(0).init_text(size)
                }
                #[inline]
                pub fn has_jwk(&self) -> bool {
                    if self.builder.get_data_field::<u16>(0) != 5 {
                        return false;
                    }
                    !self.builder.is_pointer_field_null(0)
                }
                #[inline]
                pub fn get_algorithm(
                    self,
                ) -> crate::workerd::worker::binding::crypto_key::algorithm::Builder<'a>
                {
                    self.builder.into()
                }
                #[inline]
                pub fn init_algorithm(
                    mut self,
                ) -> crate::workerd::worker::binding::crypto_key::algorithm::Builder<'a>
                {
                    self.builder.set_data_field::<u16>(1, 0);
                    self.builder.reborrow().get_pointer_field(1).clear();
                    self.builder.into()
                }
                #[inline]
                pub fn get_extractable(self) -> bool {
                    self.builder.get_bool_field(32)
                }
                #[inline]
                pub fn set_extractable(&mut self, value: bool) {
                    self.builder.set_bool_field(32, value);
                }
                #[inline]
                pub fn get_usages(
                    self,
                ) -> ::capnp::Result<
                    ::capnp::enum_list::Builder<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                > {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(2),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_usages(
                    &mut self,
                    value: ::capnp::enum_list::Reader<
                        'a,
                        crate::workerd::worker::binding::crypto_key::Usage,
                    >,
                ) -> ::capnp::Result<()> {
                    ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                        self.builder.reborrow().get_pointer_field(2),
                        value,
                        false,
                    )
                }
                #[inline]
                pub fn init_usages(
                    self,
                    size: u32,
                ) -> ::capnp::enum_list::Builder<
                    'a,
                    crate::workerd::worker::binding::crypto_key::Usage,
                > {
                    ::capnp::traits::FromPointerBuilder::init_pointer(
                        self.builder.get_pointer_field(2),
                        size,
                    )
                }
                #[inline]
                pub fn has_usages(&self) -> bool {
                    !self.builder.is_pointer_field_null(2)
                }
                #[inline]
                pub fn which(
                    self,
                ) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema>
                {
                    match self.builder.get_data_field::<u16>(0) {
                        0 => ::core::result::Result::Ok(Raw(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        1 => ::core::result::Result::Ok(Hex(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        2 => ::core::result::Result::Ok(Base64(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        3 => ::core::result::Result::Ok(Pkcs8(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        4 => ::core::result::Result::Ok(Spki(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        5 => ::core::result::Result::Ok(Jwk(
                            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                self.builder.get_pointer_field(0),
                                ::core::option::Option::None,
                            ),
                        )),
                        x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                    }
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {
                pub fn get_algorithm(
                    &self,
                ) -> crate::workerd::worker::binding::crypto_key::algorithm::Pipeline
                {
                    ::capnp::capability::FromTypelessPipeline::new(self._typeless.noop())
                }
            }
            mod _private {
                pub const TYPE_ID: u64 = 0xb5e1_bff0_e57d_6eb0;
            }
            pub enum Which<A0, A1, A2, A3, A4, A5> {
                Raw(A0),
                Hex(A1),
                Base64(A2),
                Pkcs8(A3),
                Spki(A4),
                Jwk(A5),
            }
            pub type WhichReader<'a> = Which<
                ::capnp::Result<::capnp::data::Reader<'a>>,
                ::capnp::Result<::capnp::text::Reader<'a>>,
                ::capnp::Result<::capnp::text::Reader<'a>>,
                ::capnp::Result<::capnp::text::Reader<'a>>,
                ::capnp::Result<::capnp::text::Reader<'a>>,
                ::capnp::Result<::capnp::text::Reader<'a>>,
            >;
            pub type WhichBuilder<'a> = Which<
                ::capnp::Result<::capnp::data::Builder<'a>>,
                ::capnp::Result<::capnp::text::Builder<'a>>,
                ::capnp::Result<::capnp::text::Builder<'a>>,
                ::capnp::Result<::capnp::text::Builder<'a>>,
                ::capnp::Result<::capnp::text::Builder<'a>>,
                ::capnp::Result<::capnp::text::Builder<'a>>,
            >;

            #[repr(u16)]
            #[derive(Clone, Copy, Debug, PartialEq, Eq)]
            pub enum Usage {
                Encrypt = 0,
                Decrypt = 1,
                Sign = 2,
                Verify = 3,
                DeriveKey = 4,
                DeriveBits = 5,
                WrapKey = 6,
                UnwrapKey = 7,
            }
            impl ::core::convert::TryFrom<u16> for Usage {
                type Error = ::capnp::NotInSchema;
                fn try_from(
                    value: u16,
                ) -> ::core::result::Result<Self, <Usage as ::core::convert::TryFrom<u16>>::Error>
                {
                    match value {
                        0 => ::core::result::Result::Ok(Self::Encrypt),
                        1 => ::core::result::Result::Ok(Self::Decrypt),
                        2 => ::core::result::Result::Ok(Self::Sign),
                        3 => ::core::result::Result::Ok(Self::Verify),
                        4 => ::core::result::Result::Ok(Self::DeriveKey),
                        5 => ::core::result::Result::Ok(Self::DeriveBits),
                        6 => ::core::result::Result::Ok(Self::WrapKey),
                        7 => ::core::result::Result::Ok(Self::UnwrapKey),
                        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
                    }
                }
            }
            impl From<Usage> for u16 {
                #[inline]
                fn from(x: Usage) -> u16 {
                    x as u16
                }
            }
            impl ::capnp::traits::HasTypeId for Usage {
                const TYPE_ID: u64 = 0xa863_60dd_4d20_d99eu64;
            }

            pub mod algorithm {
                pub use self::Which::{Json, Name};

                #[derive(Copy, Clone)]
                pub struct Owned(());
                impl ::capnp::traits::Owned for Owned {
                    type Reader<'a> = Reader<'a>;
                    type Builder<'a> = Builder<'a>;
                }
                impl ::capnp::traits::OwnedStruct for Owned {
                    type Reader<'a> = Reader<'a>;
                    type Builder<'a> = Builder<'a>;
                }
                impl ::capnp::traits::Pipelined for Owned {
                    type Pipeline = Pipeline;
                }

                #[derive(Clone, Copy)]
                pub struct Reader<'a> {
                    reader: ::capnp::private::layout::StructReader<'a>,
                }

                impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                    const TYPE_ID: u64 = _private::TYPE_ID;
                }
                impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                        Self { reader }
                    }
                }

                impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                    fn get_from_pointer(
                        reader: &::capnp::private::layout::PointerReader<'a>,
                        default: ::core::option::Option<&'a [capnp::Word]>,
                    ) -> ::capnp::Result<Self> {
                        ::core::result::Result::Ok(reader.get_struct(default)?.into())
                    }
                }

                impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                    fn into_internal_struct_reader(
                        self,
                    ) -> ::capnp::private::layout::StructReader<'a> {
                        self.reader
                    }
                }

                impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                        self.reader
                            .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                    }
                }

                impl<'a> Reader<'a> {
                    pub fn reborrow(&self) -> Reader<'_> {
                        Self { ..*self }
                    }

                    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                        self.reader.total_size()
                    }
                    #[inline]
                    pub fn has_name(&self) -> bool {
                        if self.reader.get_data_field::<u16>(1) != 0 {
                            return false;
                        }
                        !self.reader.get_pointer_field(1).is_null()
                    }
                    #[inline]
                    pub fn has_json(&self) -> bool {
                        if self.reader.get_data_field::<u16>(1) != 1 {
                            return false;
                        }
                        !self.reader.get_pointer_field(1).is_null()
                    }
                    #[inline]
                    pub fn which(
                        self,
                    ) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema>
                    {
                        match self.reader.get_data_field::<u16>(1) {
                            0 => ::core::result::Result::Ok(Name(
                                ::capnp::traits::FromPointerReader::get_from_pointer(
                                    &self.reader.get_pointer_field(1),
                                    ::core::option::Option::None,
                                ),
                            )),
                            1 => ::core::result::Result::Ok(Json(
                                ::capnp::traits::FromPointerReader::get_from_pointer(
                                    &self.reader.get_pointer_field(1),
                                    ::core::option::Option::None,
                                ),
                            )),
                            x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                        }
                    }
                }

                pub struct Builder<'a> {
                    builder: ::capnp::private::layout::StructBuilder<'a>,
                }
                impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                    const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                        ::capnp::private::layout::StructSize {
                            data: 1,
                            pointers: 3,
                        };
                }
                impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                    const TYPE_ID: u64 = _private::TYPE_ID;
                }
                impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                        Self { builder }
                    }
                }

                impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                        self.builder
                            .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                    }
                }

                impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                    fn init_pointer(
                        builder: ::capnp::private::layout::PointerBuilder<'a>,
                        _size: u32,
                    ) -> Self {
                        builder
                            .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                            .into()
                    }
                    fn get_from_pointer(
                        builder: ::capnp::private::layout::PointerBuilder<'a>,
                        default: ::core::option::Option<&'a [capnp::Word]>,
                    ) -> ::capnp::Result<Self> {
                        ::core::result::Result::Ok(
                            builder
                                .get_struct(
                                    <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                    default,
                                )?
                                .into(),
                        )
                    }
                }

                impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                    fn set_pointer_builder(
                        mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                        value: Self,
                        canonicalize: bool,
                    ) -> ::capnp::Result<()> {
                        pointer.set_struct(&value.reader, canonicalize)
                    }
                }

                impl<'a> Builder<'a> {
                    pub fn into_reader(self) -> Reader<'a> {
                        self.builder.into_reader().into()
                    }
                    pub fn reborrow(&mut self) -> Builder<'_> {
                        Builder {
                            builder: self.builder.reborrow(),
                        }
                    }
                    pub fn reborrow_as_reader(&self) -> Reader<'_> {
                        self.builder.as_reader().into()
                    }

                    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                        self.builder.as_reader().total_size()
                    }
                    #[inline]
                    pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                        self.builder.set_data_field::<u16>(1, 0);
                        self.builder.reborrow().get_pointer_field(1).set_text(value);
                    }
                    #[inline]
                    pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                        self.builder.set_data_field::<u16>(1, 0);
                        self.builder.get_pointer_field(1).init_text(size)
                    }
                    #[inline]
                    pub fn has_name(&self) -> bool {
                        if self.builder.get_data_field::<u16>(1) != 0 {
                            return false;
                        }
                        !self.builder.is_pointer_field_null(1)
                    }
                    #[inline]
                    pub fn set_json(&mut self, value: ::capnp::text::Reader<'_>) {
                        self.builder.set_data_field::<u16>(1, 1);
                        self.builder.reborrow().get_pointer_field(1).set_text(value);
                    }
                    #[inline]
                    pub fn init_json(self, size: u32) -> ::capnp::text::Builder<'a> {
                        self.builder.set_data_field::<u16>(1, 1);
                        self.builder.get_pointer_field(1).init_text(size)
                    }
                    #[inline]
                    pub fn has_json(&self) -> bool {
                        if self.builder.get_data_field::<u16>(1) != 1 {
                            return false;
                        }
                        !self.builder.is_pointer_field_null(1)
                    }
                    #[inline]
                    pub fn which(
                        self,
                    ) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema>
                    {
                        match self.builder.get_data_field::<u16>(1) {
                            0 => ::core::result::Result::Ok(Name(
                                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                    self.builder.get_pointer_field(1),
                                    ::core::option::Option::None,
                                ),
                            )),
                            1 => ::core::result::Result::Ok(Json(
                                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                                    self.builder.get_pointer_field(1),
                                    ::core::option::Option::None,
                                ),
                            )),
                            x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                        }
                    }
                }

                pub struct Pipeline {
                    _typeless: ::capnp::any_pointer::Pipeline,
                }
                impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                        Self {
                            _typeless: typeless,
                        }
                    }
                }
                impl Pipeline {}
                mod _private {
                    pub const TYPE_ID: u64 = 0xa1a0_40c5_e00d_7021;
                }
                pub enum Which<A0, A1> {
                    Name(A0),
                    Json(A1),
                }
                pub type WhichReader<'a> = Which<
                    ::capnp::Result<::capnp::text::Reader<'a>>,
                    ::capnp::Result<::capnp::text::Reader<'a>>,
                >;
                pub type WhichBuilder<'a> = Which<
                    ::capnp::Result<::capnp::text::Builder<'a>>,
                    ::capnp::Result<::capnp::text::Builder<'a>>,
                >;
            }
        }

        pub mod parameter {
            #[derive(Copy, Clone)]
            pub struct Owned(());
            impl ::capnp::traits::Owned for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::OwnedStruct for Owned {
                type Reader<'a> = Reader<'a>;
                type Builder<'a> = Builder<'a>;
            }
            impl ::capnp::traits::Pipelined for Owned {
                type Pipeline = Pipeline;
            }

            #[derive(Clone, Copy)]
            pub struct Reader<'a> {
                reader: ::capnp::private::layout::StructReader<'a>,
            }

            impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
                fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                    Self { reader }
                }
            }

            impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
                fn get_from_pointer(
                    reader: &::capnp::private::layout::PointerReader<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(reader.get_struct(default)?.into())
                }
            }

            impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
                fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                    self.reader
                }
            }

            impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
                fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                    self.reader
                        .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
                }
            }

            impl<'a> Reader<'a> {
                pub fn reborrow(&self) -> Reader<'_> {
                    Self { ..*self }
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.reader.total_size()
                }
                #[inline]
                pub fn get_type(
                    self,
                ) -> ::capnp::Result<crate::workerd::worker::binding::type_::Reader<'a>>
                {
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.reader.get_pointer_field(1).is_null()
                }
                #[inline]
                pub fn get_optional(self) -> bool {
                    self.reader.get_bool_field(16)
                }
            }

            pub struct Builder<'a> {
                builder: ::capnp::private::layout::StructBuilder<'a>,
            }
            impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
                const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                    ::capnp::private::layout::StructSize {
                        data: 1,
                        pointers: 2,
                    };
            }
            impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
                const TYPE_ID: u64 = _private::TYPE_ID;
            }
            impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
                fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                    Self { builder }
                }
            }

            impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
                fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                    self.builder
                        .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
                }
            }

            impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
                fn init_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    _size: u32,
                ) -> Self {
                    builder
                        .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                        .into()
                }
                fn get_from_pointer(
                    builder: ::capnp::private::layout::PointerBuilder<'a>,
                    default: ::core::option::Option<&'a [capnp::Word]>,
                ) -> ::capnp::Result<Self> {
                    ::core::result::Result::Ok(
                        builder
                            .get_struct(
                                <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                                default,
                            )?
                            .into(),
                    )
                }
            }

            impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
                fn set_pointer_builder(
                    mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                    value: Self,
                    canonicalize: bool,
                ) -> ::capnp::Result<()> {
                    pointer.set_struct(&value.reader, canonicalize)
                }
            }

            impl<'a> Builder<'a> {
                pub fn into_reader(self) -> Reader<'a> {
                    self.builder.into_reader().into()
                }
                pub fn reborrow(&mut self) -> Builder<'_> {
                    Builder {
                        builder: self.builder.reborrow(),
                    }
                }
                pub fn reborrow_as_reader(&self) -> Reader<'_> {
                    self.builder.as_reader().into()
                }

                pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                    self.builder.as_reader().total_size()
                }
                #[inline]
                pub fn get_type(
                    self,
                ) -> ::capnp::Result<crate::workerd::worker::binding::type_::Builder<'a>>
                {
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    )
                }
                #[inline]
                pub fn set_type(
                    &mut self,
                    value: crate::workerd::worker::binding::type_::Reader<'_>,
                ) -> ::capnp::Result<()> {
                    ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                        self.builder.reborrow().get_pointer_field(1),
                        value,
                        false,
                    )
                }
                #[inline]
                pub fn init_type(
                    self,
                ) -> crate::workerd::worker::binding::type_::Builder<'a> {
                    ::capnp::traits::FromPointerBuilder::init_pointer(
                        self.builder.get_pointer_field(1),
                        0,
                    )
                }
                #[inline]
                pub fn has_type(&self) -> bool {
                    !self.builder.is_pointer_field_null(1)
                }
                #[inline]
                pub fn get_optional(self) -> bool {
                    self.builder.get_bool_field(16)
                }
                #[inline]
                pub fn set_optional(&mut self, value: bool) {
                    self.builder.set_bool_field(16, value);
                }
            }

            pub struct Pipeline {
                _typeless: ::capnp::any_pointer::Pipeline,
            }
            impl ::capnp::capability::FromTypelessPipeline for Pipeline {
                fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                    Self {
                        _typeless: typeless,
                    }
                }
            }
            impl Pipeline {
                pub fn get_type(&self) -> crate::workerd::worker::binding::type_::Pipeline {
                    ::capnp::capability::FromTypelessPipeline::new(
                        self._typeless.get_pointer_field(1),
                    )
                }
            }
            mod _private {
                pub const TYPE_ID: u64 = 0xdc57_e125_8d26_d152;
            }
        }
    }

    pub mod durable_object_namespace {
        pub use self::Which::{EphemeralLocal, UniqueKey};

        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_class_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_class_name(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn has_unique_key(&self) -> bool {
                if self.reader.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(UniqueKey(
                        ::capnp::traits::FromPointerReader::get_from_pointer(
                            &self.reader.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    1 => ::core::result::Result::Ok(EphemeralLocal(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_class_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_class_name(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_class_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_class_name(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn set_unique_key(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_unique_key(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.set_data_field::<u16>(0, 0);
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_unique_key(&self) -> bool {
                if self.builder.get_data_field::<u16>(0) != 0 {
                    return false;
                }
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn set_ephemeral_local(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(0, 1);
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(0) {
                    0 => ::core::result::Result::Ok(UniqueKey(
                        ::capnp::traits::FromPointerBuilder::get_from_pointer(
                            self.builder.get_pointer_field(1),
                            ::core::option::Option::None,
                        ),
                    )),
                    1 => ::core::result::Result::Ok(EphemeralLocal(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0xb429_dd54_7d15_747d;
        }
        pub enum Which<A0> {
            UniqueKey(A0),
            EphemeralLocal(()),
        }
        pub type WhichReader<'a> = Which<::capnp::Result<::capnp::text::Reader<'a>>>;
        pub type WhichBuilder<'a> = Which<::capnp::Result<::capnp::text::Builder<'a>>>;
    }

    pub mod durable_object_storage {
        pub use self::Which::{InMemory, None};

        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichReader, ::capnp::NotInSchema> {
                match self.reader.get_data_field::<u16>(1) {
                    0 => ::core::result::Result::Ok(None(())),
                    1 => ::core::result::Result::Ok(InMemory(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 8,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn set_none(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(1, 0);
            }
            #[inline]
            pub fn set_in_memory(&mut self, _value: ()) {
                self.builder.set_data_field::<u16>(1, 1);
            }
            #[inline]
            pub fn which(self) -> ::core::result::Result<WhichBuilder, ::capnp::NotInSchema> {
                match self.builder.get_data_field::<u16>(1) {
                    0 => ::core::result::Result::Ok(None(())),
                    1 => ::core::result::Result::Ok(InMemory(())),
                    x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
                }
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0xcc72_b3fa_a578_27d4;
        }
        pub enum Which {
            None(()),
            InMemory(()),
        }
        pub type WhichReader = Which;
        pub type WhichBuilder = Which;
    }
}

pub mod external_server {
    pub use self::Which::{Http, Https};

    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_address(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_address(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn has_http(&self) -> bool {
            if self.reader.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichReader<'a>, ::capnp::NotInSchema> {
            match self.reader.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Http(
                    ::capnp::traits::FromPointerReader::get_from_pointer(
                        &self.reader.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(Https(self.reader.into())),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 4,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_address(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_address(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_address(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_address(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn set_http(
            &mut self,
            value: crate::workerd::http_options::Reader<'_>,
        ) -> ::capnp::Result<()> {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_http(self) -> crate::workerd::http_options::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 0);
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(1), 0)
        }
        #[inline]
        pub fn has_http(&self) -> bool {
            if self.builder.get_data_field::<u16>(0) != 0 {
                return false;
            }
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn init_https(mut self) -> crate::workerd::external_server::https::Builder<'a> {
            self.builder.set_data_field::<u16>(0, 1);
            self.builder.reborrow().get_pointer_field(1).clear();
            self.builder.reborrow().get_pointer_field(2).clear();
            self.builder.reborrow().get_pointer_field(3).clear();
            self.builder.into()
        }
        #[inline]
        pub fn which(self) -> ::core::result::Result<WhichBuilder<'a>, ::capnp::NotInSchema> {
            match self.builder.get_data_field::<u16>(0) {
                0 => ::core::result::Result::Ok(Http(
                    ::capnp::traits::FromPointerBuilder::get_from_pointer(
                        self.builder.get_pointer_field(1),
                        ::core::option::Option::None,
                    ),
                )),
                1 => ::core::result::Result::Ok(Https(self.builder.into())),
                x => ::core::result::Result::Err(::capnp::NotInSchema(x)),
            }
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0xff20_9f9a_a352_f5a4;
    }
    pub enum Which<A0, A1> {
        Http(A0),
        Https(A1),
    }
    pub type WhichReader<'a> = Which<
        ::capnp::Result<crate::workerd::http_options::Reader<'a>>,
        crate::workerd::external_server::https::Reader<'a>,
    >;
    pub type WhichBuilder<'a> = Which<
        ::capnp::Result<crate::workerd::http_options::Builder<'a>>,
        crate::workerd::external_server::https::Builder<'a>,
    >;

    pub mod https {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_options(
                self,
            ) -> ::capnp::Result<crate::workerd::http_options::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_options(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
            #[inline]
            pub fn get_tls_options(
                self,
            ) -> ::capnp::Result<crate::workerd::tls_options::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_tls_options(&self) -> bool {
                !self.reader.get_pointer_field(2).is_null()
            }
            #[inline]
            pub fn get_certificate_host(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_certificate_host(&self) -> bool {
                !self.reader.get_pointer_field(3).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 1,
                    pointers: 4,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_options(
                self,
            ) -> ::capnp::Result<crate::workerd::http_options::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_options(
                &mut self,
                value: crate::workerd::http_options::Reader<'_>,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_options(self) -> crate::workerd::http_options::Builder<'a> {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(1),
                    0,
                )
            }
            #[inline]
            pub fn has_options(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
            #[inline]
            pub fn get_tls_options(
                self,
            ) -> ::capnp::Result<crate::workerd::tls_options::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(2),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_tls_options(
                &mut self,
                value: crate::workerd::tls_options::Reader<'_>,
            ) -> ::capnp::Result<()> {
                ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(2),
                    value,
                    false,
                )
            }
            #[inline]
            pub fn init_tls_options(self) -> crate::workerd::tls_options::Builder<'a> {
                ::capnp::traits::FromPointerBuilder::init_pointer(
                    self.builder.get_pointer_field(2),
                    0,
                )
            }
            #[inline]
            pub fn has_tls_options(&self) -> bool {
                !self.builder.is_pointer_field_null(2)
            }
            #[inline]
            pub fn get_certificate_host(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(3),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_certificate_host(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(3).set_text(value);
            }
            #[inline]
            pub fn init_certificate_host(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(3).init_text(size)
            }
            #[inline]
            pub fn has_certificate_host(&self) -> bool {
                !self.builder.is_pointer_field_null(3)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {
            pub fn get_options(&self) -> crate::workerd::http_options::Pipeline {
                ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(1))
            }
            pub fn get_tls_options(&self) -> crate::workerd::tls_options::Pipeline {
                ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
            }
        }
        mod _private {
            pub const TYPE_ID: u64 = 0xac37_e02a_fd3d_c6db;
        }
    }
}

pub mod network {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_allow(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                Some(&_private::DEFAULT_ALLOW[..]),
            )
        }
        #[inline]
        pub fn has_allow(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_deny(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_deny(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_tls_options(
            self,
        ) -> ::capnp::Result<crate::workerd::tls_options::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_tls_options(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 0,
                pointers: 3,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_allow(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                Some(&_private::DEFAULT_ALLOW[..]),
            )
        }
        #[inline]
        pub fn set_allow(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_allow(self, size: u32) -> ::capnp::text_list::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(0),
                size,
            )
        }
        #[inline]
        pub fn has_allow(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_deny(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_deny(&mut self, value: ::capnp::text_list::Reader<'a>) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_deny(self, size: u32) -> ::capnp::text_list::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(1),
                size,
            )
        }
        #[inline]
        pub fn has_deny(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_tls_options(
            self,
        ) -> ::capnp::Result<crate::workerd::tls_options::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_tls_options(
            &mut self,
            value: crate::workerd::tls_options::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(2),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_tls_options(self) -> crate::workerd::tls_options::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(2), 0)
        }
        #[inline]
        pub fn has_tls_options(&self) -> bool {
            !self.builder.is_pointer_field_null(2)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {
        pub fn get_tls_options(&self) -> crate::workerd::tls_options::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(2))
        }
    }
    mod _private {
        pub static DEFAULT_ALLOW: [capnp::Word; 3] = [
            capnp::word(1, 0, 0, 0, 14, 0, 0, 0),
            capnp::word(1, 0, 0, 0, 58, 0, 0, 0),
            capnp::word(112, 117, 98, 108, 105, 99, 0, 0),
        ];
        pub const TYPE_ID: u64 = 0xfa42_244f_950c_9b9c;
    }
}

pub mod disk_directory {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_path(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_path(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_writable(self) -> bool {
            self.reader.get_bool_field(0)
        }
        #[inline]
        pub fn get_allow_dotfiles(self) -> bool {
            self.reader.get_bool_field(1)
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 1,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_path(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_path(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_path(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_path(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_writable(self) -> bool {
            self.builder.get_bool_field(0)
        }
        #[inline]
        pub fn set_writable(&mut self, value: bool) {
            self.builder.set_bool_field(0, value);
        }
        #[inline]
        pub fn get_allow_dotfiles(self) -> bool {
            self.builder.get_bool_field(1)
        }
        #[inline]
        pub fn set_allow_dotfiles(&mut self, value: bool) {
            self.builder.set_bool_field(1, value);
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0x9048_ab22_835f_51c3;
    }
}

pub mod http_options {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_style(
            self,
        ) -> ::core::result::Result<crate::workerd::http_options::Style, ::capnp::NotInSchema>
        {
            ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
        }
        #[inline]
        pub fn get_forwarded_proto_header(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_forwarded_proto_header(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_cf_blob_header(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_cf_blob_header(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_inject_request_headers(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::workerd::http_options::header::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_inject_request_headers(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
        #[inline]
        pub fn get_inject_response_headers(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Reader<'a, crate::workerd::http_options::header::Owned>,
        > {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(3),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_inject_response_headers(&self) -> bool {
            !self.reader.get_pointer_field(3).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 4,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_style(
            self,
        ) -> ::core::result::Result<crate::workerd::http_options::Style, ::capnp::NotInSchema>
        {
            ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
        }
        #[inline]
        pub fn set_style(&mut self, value: crate::workerd::http_options::Style) {
            self.builder.set_data_field::<u16>(0, value as u16)
        }
        #[inline]
        pub fn get_forwarded_proto_header(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_forwarded_proto_header(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(0).set_text(value);
        }
        #[inline]
        pub fn init_forwarded_proto_header(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(0).init_text(size)
        }
        #[inline]
        pub fn has_forwarded_proto_header(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_cf_blob_header(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_cf_blob_header(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(1).set_text(value);
        }
        #[inline]
        pub fn init_cf_blob_header(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(1).init_text(size)
        }
        #[inline]
        pub fn has_cf_blob_header(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_inject_request_headers(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::workerd::http_options::header::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_inject_request_headers(
            &mut self,
            value: ::capnp::struct_list::Reader<
                'a,
                crate::workerd::http_options::header::Owned,
            >,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(2),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_inject_request_headers(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::http_options::header::Owned>
        {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(2),
                size,
            )
        }
        #[inline]
        pub fn has_inject_request_headers(&self) -> bool {
            !self.builder.is_pointer_field_null(2)
        }
        #[inline]
        pub fn get_inject_response_headers(
            self,
        ) -> ::capnp::Result<
            ::capnp::struct_list::Builder<'a, crate::workerd::http_options::header::Owned>,
        > {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(3),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_inject_response_headers(
            &mut self,
            value: ::capnp::struct_list::Reader<
                'a,
                crate::workerd::http_options::header::Owned,
            >,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(3),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_inject_response_headers(
            self,
            size: u32,
        ) -> ::capnp::struct_list::Builder<'a, crate::workerd::http_options::header::Owned>
        {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(3),
                size,
            )
        }
        #[inline]
        pub fn has_inject_response_headers(&self) -> bool {
            !self.builder.is_pointer_field_null(3)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {}
    mod _private {
        pub const TYPE_ID: u64 = 0xaa8d_c688_5da7_8f19;
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum Style {
        Host = 0,
        Proxy = 1,
    }
    impl ::core::convert::TryFrom<u16> for Style {
        type Error = ::capnp::NotInSchema;
        fn try_from(
            value: u16,
        ) -> ::core::result::Result<Self, <Style as ::core::convert::TryFrom<u16>>::Error> {
            match value {
                0 => ::core::result::Result::Ok(Self::Host),
                1 => ::core::result::Result::Ok(Self::Proxy),
                n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
            }
        }
    }
    impl From<Style> for u16 {
        #[inline]
        fn from(x: Style) -> u16 {
            x as u16
        }
    }
    impl ::capnp::traits::HasTypeId for Style {
        const TYPE_ID: u64 = 0xaaa6_6074_96d7_a1c2u64;
    }

    pub mod header {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn get_value(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_value(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 0,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_name(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_name(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_name(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_name(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn get_value(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_value(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_value(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_value(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0xdc03_94b5_a6f3_417e;
        }
    }
}

pub mod tls_options {
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::OwnedStruct for Owned {
        type Reader<'a> = Reader<'a>;
        type Builder<'a> = Builder<'a>;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Pipeline;
    }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> {
        reader: ::capnp::private::layout::StructReader<'a>,
    }

    impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
        fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
            Self { reader }
        }
    }

    impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(reader.get_struct(default)?.into())
        }
    }

    impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
        fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
            self.reader
        }
    }

    impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
        fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
            self.reader
                .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
        }
    }

    impl<'a> Reader<'a> {
        pub fn reborrow(&self) -> Reader<'_> {
            Self { ..*self }
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.reader.total_size()
        }
        #[inline]
        pub fn get_keypair(
            self,
        ) -> ::capnp::Result<crate::workerd::tls_options::keypair::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_keypair(&self) -> bool {
            !self.reader.get_pointer_field(0).is_null()
        }
        #[inline]
        pub fn get_require_client_certs(self) -> bool {
            self.reader.get_bool_field(0)
        }
        #[inline]
        pub fn get_trust_browser_cas(self) -> bool {
            self.reader.get_bool_field(1)
        }
        #[inline]
        pub fn get_trusted_certificates(self) -> ::capnp::Result<::capnp::text_list::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_trusted_certificates(&self) -> bool {
            !self.reader.get_pointer_field(1).is_null()
        }
        #[inline]
        pub fn get_min_version(
            self,
        ) -> ::core::result::Result<crate::workerd::tls_options::Version, ::capnp::NotInSchema>
        {
            ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn get_cipher_list(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
            ::capnp::traits::FromPointerReader::get_from_pointer(
                &self.reader.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn has_cipher_list(&self) -> bool {
            !self.reader.get_pointer_field(2).is_null()
        }
    }

    pub struct Builder<'a> {
        builder: ::capnp::private::layout::StructBuilder<'a>,
    }
    impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
        const STRUCT_SIZE: ::capnp::private::layout::StructSize =
            ::capnp::private::layout::StructSize {
                data: 1,
                pointers: 3,
            };
    }
    impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
        fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
            Self { builder }
        }
    }

    impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
        fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
            self.builder
                .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
        }
    }

    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
        fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
            builder
                .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                .into()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            default: ::core::option::Option<&'a [capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(
                builder
                    .get_struct(
                        <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                        default,
                    )?
                    .into(),
            )
        }
    }

    impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            value: Self,
            canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_struct(&value.reader, canonicalize)
        }
    }

    impl<'a> Builder<'a> {
        pub fn into_reader(self) -> Reader<'a> {
            self.builder.into_reader().into()
        }
        pub fn reborrow(&mut self) -> Builder<'_> {
            Builder {
                builder: self.builder.reborrow(),
            }
        }
        pub fn reborrow_as_reader(&self) -> Reader<'_> {
            self.builder.as_reader().into()
        }

        pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
            self.builder.as_reader().total_size()
        }
        #[inline]
        pub fn get_keypair(
            self,
        ) -> ::capnp::Result<crate::workerd::tls_options::keypair::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(0),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_keypair(
            &mut self,
            value: crate::workerd::tls_options::keypair::Reader<'_>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(0),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_keypair(self) -> crate::workerd::tls_options::keypair::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
        }
        #[inline]
        pub fn has_keypair(&self) -> bool {
            !self.builder.is_pointer_field_null(0)
        }
        #[inline]
        pub fn get_require_client_certs(self) -> bool {
            self.builder.get_bool_field(0)
        }
        #[inline]
        pub fn set_require_client_certs(&mut self, value: bool) {
            self.builder.set_bool_field(0, value);
        }
        #[inline]
        pub fn get_trust_browser_cas(self) -> bool {
            self.builder.get_bool_field(1)
        }
        #[inline]
        pub fn set_trust_browser_cas(&mut self, value: bool) {
            self.builder.set_bool_field(1, value);
        }
        #[inline]
        pub fn get_trusted_certificates(self) -> ::capnp::Result<::capnp::text_list::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(1),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_trusted_certificates(
            &mut self,
            value: ::capnp::text_list::Reader<'a>,
        ) -> ::capnp::Result<()> {
            ::capnp::traits::SetPointerBuilder::set_pointer_builder(
                self.builder.reborrow().get_pointer_field(1),
                value,
                false,
            )
        }
        #[inline]
        pub fn init_trusted_certificates(self, size: u32) -> ::capnp::text_list::Builder<'a> {
            ::capnp::traits::FromPointerBuilder::init_pointer(
                self.builder.get_pointer_field(1),
                size,
            )
        }
        #[inline]
        pub fn has_trusted_certificates(&self) -> bool {
            !self.builder.is_pointer_field_null(1)
        }
        #[inline]
        pub fn get_min_version(
            self,
        ) -> ::core::result::Result<crate::workerd::tls_options::Version, ::capnp::NotInSchema>
        {
            ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
        }
        #[inline]
        pub fn set_min_version(&mut self, value: crate::workerd::tls_options::Version) {
            self.builder.set_data_field::<u16>(1, value as u16)
        }
        #[inline]
        pub fn get_cipher_list(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
            ::capnp::traits::FromPointerBuilder::get_from_pointer(
                self.builder.get_pointer_field(2),
                ::core::option::Option::None,
            )
        }
        #[inline]
        pub fn set_cipher_list(&mut self, value: ::capnp::text::Reader<'_>) {
            self.builder.reborrow().get_pointer_field(2).set_text(value);
        }
        #[inline]
        pub fn init_cipher_list(self, size: u32) -> ::capnp::text::Builder<'a> {
            self.builder.get_pointer_field(2).init_text(size)
        }
        #[inline]
        pub fn has_cipher_list(&self) -> bool {
            !self.builder.is_pointer_field_null(2)
        }
    }

    pub struct Pipeline {
        _typeless: ::capnp::any_pointer::Pipeline,
    }
    impl ::capnp::capability::FromTypelessPipeline for Pipeline {
        fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
            Self {
                _typeless: typeless,
            }
        }
    }
    impl Pipeline {
        pub fn get_keypair(&self) -> crate::workerd::tls_options::keypair::Pipeline {
            ::capnp::capability::FromTypelessPipeline::new(self._typeless.get_pointer_field(0))
        }
    }
    mod _private {
        pub const TYPE_ID: u64 = 0xaabb_3c37_78ac_4311;
    }

    pub mod keypair {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        #[derive(Clone, Copy)]
        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }

        impl<'a> ::capnp::traits::HasTypeId for Reader<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_private_key(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_private_key(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn get_certificate_chain(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_certificate_chain(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl<'a> ::capnp::traits::HasStructSize for Builder<'a> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 0,
                    pointers: 2,
                };
        }
        impl<'a> ::capnp::traits::HasTypeId for Builder<'a> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl<'a> ::capnp::traits::SetPointerBuilder for Reader<'a> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_private_key(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_private_key(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(0).set_text(value);
            }
            #[inline]
            pub fn init_private_key(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_private_key(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn get_certificate_chain(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_certificate_chain(&mut self, value: ::capnp::text::Reader<'_>) {
                self.builder.reborrow().get_pointer_field(1).set_text(value);
            }
            #[inline]
            pub fn init_certificate_chain(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_certificate_chain(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub const TYPE_ID: u64 = 0xf546_bf2d_5d8b_d13e;
        }
    }

    #[repr(u16)]
    #[derive(Clone, Copy, Debug, PartialEq, Eq)]
    pub enum Version {
        GoodDefault = 0,
        Ssl3 = 1,
        Tls1Dot0 = 2,
        Tls1Dot1 = 3,
        Tls1Dot2 = 4,
        Tls1Dot3 = 5,
    }
    impl ::core::convert::TryFrom<u16> for Version {
        type Error = ::capnp::NotInSchema;
        fn try_from(
            value: u16,
        ) -> ::core::result::Result<Self, <Version as ::core::convert::TryFrom<u16>>::Error>
        {
            match value {
                0 => ::core::result::Result::Ok(Self::GoodDefault),
                1 => ::core::result::Result::Ok(Self::Ssl3),
                2 => ::core::result::Result::Ok(Self::Tls1Dot0),
                3 => ::core::result::Result::Ok(Self::Tls1Dot1),
                4 => ::core::result::Result::Ok(Self::Tls1Dot2),
                5 => ::core::result::Result::Ok(Self::Tls1Dot3),
                n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
            }
        }
    }
    impl From<Version> for u16 {
        #[inline]
        fn from(x: Version) -> u16 {
            x as u16
        }
    }
    impl ::capnp::traits::HasTypeId for Version {
        const TYPE_ID: u64 = 0xf028_1348_6876_d580u64;
    }
}
